
* Global settings:
Some of these may be environment-dependent, e.g. NODE_ID, others are global settings that change run behaviour (e.g. SCHEDULING_MODE) or even results (SAMPLING_TRAFO)
** Environment only
- Scheduling
  - JOBCOUNT :: Number of sbatch invocations to run in invoke_sbatch.sh; default 1
  - ONEOFF :: [string] "TRUE" or "FALSE" (default): whether to restart invocations after each eval (mainly for memory usage profiling).
- Redis:
  - REDISHOST :: redis hostname
  - REDISPORT :: redis port
- R-Script invocation
  - LEARNERNAME :: set in *runscript.sh*, read by eval_redis.R
  - TASKNAME :: set in *runscript.sh*, read by eval_redis.R
** Environment AND R setting
- Directories
  - MUC_R_HOME :: base directory of this repository, has subdirectories =input/=, =R/=, =scheduling/=, =setup/=. Set/inferred by most *.sh* files.
  - DATADIR :: directory where data files are stored, set by *constants.R* to =MUC_R_HOME/data=
** R setting only
- Input settings
  - DATA_TABLE :: filename of data info csv. set by *constants.R*
  - DATA_TABLE_OPTS :: options to be given to =read.csv= when reading DATA_TABLE. set by *constants.R*
  - SEARCHSPACE_TABLE :: filename of search space csv. set by *constants.R*
  - SEARCHSPACE_TABLE_OPTS :: options to be given to =read.csv= when reading SEARCHSPACE_TABLE. set by *constants.R*
- Sampling Configuration
  - SUPERRATE :: [numeric 0..1] fraction of evaluation points that have supererogatory evaluations
  - SUPERCV_PROPORTIONS :: [numeric 0..1] subsampling proportions to sample
  - SAMPLING_TRAFO :: "none", "default", "default+norm"
    - "none" :: transformations given in paramspace csv are not performed (although the given parameter limits are transformed)
    - "default" :: transformations as given in paramspace csv
    - "norm" :: transformation as given, prepended by an inverse error function; parameter bounds as given are instead the inflection points of the normal distribution (i.e. each 1 std-dev from center)
  - RESAMPLINGTIMEOUTS :: [numeric] seconds to wait for each resampling. Violating the time constraint kills the R session if the watchdog is running.
* Directory structure
- data
  input arguments are in file DATADIR/INPUTS, a *single space* separated file with columns <LEARNER> <TASK> <POINT_STRING>. LEARNER changes the fastest, then TASK, then POINT_STRING changes slowest (i.e. LEARNER is the inner loop)
- input
  - learners
- R
- scheduling
- setup
- testenv
* scheduling
Scheduling happens with "Redis". The integer value of key "QUEUE_lrn:<learner>_tsk:<task>" is atomically incremented, the corresponding seed is evaluated, and the result is written to "RESULT_lrn:<learner>_tsk:<task>_SD:<seed>_val:<hyperparameter vals>". Unless ONEOFF is set to TRUE, evaluation happens in an infinite loop until the process is killed. So far there is no way of knowing whether a result is missing because of an error, timeout, memory out, or user intervention.
* Control Flow
1. invoke_sbatch.sh
   - Takes arguments:
     - *JOBCOUNT*
     - ONEOFF
   - Exports further arguments:
     - MUC_R_HOME
   - Does:
     - for loop through *JOBCOUNT*: run *sbatch sbatch.cmd*
2. sbatch.cmd
   - Takes arguments:
     - *MUC_R_HOME*
     - ONEOFF
   - SLURM arguments:
     - SLURM_JOB_NAME (not essential)
     - SLURM_JOB_ID (not essential)
     - *SLURM_NTASKS*
   - Uses from constants.R:
     - *DATADIR*
   - Exports further arguments
     - SBATCH_INDEX :: modified when iterating over CONTROL_JOB_COUNT
     - INDEXSTEPSIZE :: augmented by CONTROL_JOB_COUNT
     - TOTAL_TASK_SLOTS :: indicates total (maximum) number of tasks to queue
     - INDIVIDUAL_TASK_SLOTS :: indicates total (maximum) number of tasks for single invoke_srun instance
   - Does:
     - creates at most SLURM_NTASKS worker threads that repeatedly call srun *runscript.sh*
3. runscript.sh
   - Takes arguments:
     - *TASKNAME* (from arg 1)
     - *LEARNERNAME* (from arg 2)
     - ONEOFF (from arg 3)
   - Exports further arguments:
     - TOKEN
   - Does:
     - calls *eval_redis.R*, also traces the process's memory usage.
4. eval_redis.R
   - Takes arguments:
     - *TOKEN*
     - *MUC_R_HOME*
     - *LEARNERNAME*
     - *TASKNAME*
     - *REDISHOST*
     - *REDISPORT*
     - *ONEOFF*
* Scriptlets

cat ../RESULT_REDIS_3/slurm-48771.out | cut -d : -f 1 | sort | uniq > threads

( echo "dataset learner invocation restart point evalno walltime kernelseconds userseconds cpupercent memorykb" ;
  cat threads | \
  while read t ; do \
    grep -F "$t" ../RESULT_REDIS_3/slurm-48771.out | \
      cut -d ' ' -f 2- | \
        sed 's/\[\[[0-9]\+\]\] ----\[[^]]*\]  exited with status [0-9]*//g' | \
        sed 's/----\[[-0-9:]*_[^]]*\] eval_redis.R//g' | \
        sed 's/----\[[-0-9:]*_[^]]*\] Connecting to redis [^:]*:[0-9]*//g' | \
	sed 's/----\[[-0-9:]*_[^]]*\] Done evaluating seed [0-9]*//g' | \
      tr $'\n' '@' | sed 's/@\([^-![]\)/\1/g' | tr '@' $'\n' | \
      grep -v '^!' | grep 'Evaluating point \|^\[.*kB' | tr $'\n' '@' | \
      sed 's/@\[/ [/g' | tr '@' $'\n' | \
      cut -d ' ' -f 4,5,8,10,12,14,16 | \
      sed 's/[][]//g' | sed 's/kB$//' | sed 's/[%s] / /g' | sed "s/^/$t/" | \
      sed 's/^\[\([^,]*\),\([^,]*\),\([0-9]\+\),\([0-9]\+\)\]/\1 \2 \3 \4 /' | \
      grep -v ')$' ; done
) > memtable


